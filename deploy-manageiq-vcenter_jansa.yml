---
- hosts: localhost
  tasks:
          # Adding logic for release not equal jansa .....    
          # jansa current fails on step 5 because of issue with root user ....12/5/2020
          # Adding  or release != 'kasparov' 12/22/2020
    - name: Step 1 - Locating File
      find:
        paths: "/builds/manageiq/{{ release }}/{{ version }}/"
        patterns: "manageiq-vsphere*.ova"
      register: ova_image

    - name: Step 2 - Deploying OVA File
      vmware_deploy_ovf:
        hostname: '{{ myhost }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        cluster: dev-vc67-cluster
        datacenter: dev-vc67-DC
        datastore: NFS Share
        ovf: "{{ item.path }}"
        allow_duplicates: no
        validate_certs: no
        name: '{{ newvm }}'
        power_on: no
      with_items: "{{ ova_image.files }}"
      delegate_to: localhost

    - name: Step 3 - Adjusting memory size
      vmware_guest:
        hostname: '{{ myhost }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        validate_certs: no
        name: '{{ newvm }}'
        hardware:
          memory_mb: "{{ memorySize }}"
      delegate_to: localhost

    - name: Step 4 - Powering on appliance
      vmware_guest:
        hostname: '{{ myhost }}'
        username: '{{ lookup("env", "VMWARE_USER") }}'
        password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
        validate_certs: no
        name: '{{ newvm }}'
        state: poweredon
        wait_for_ip_address: True
      delegate_to: localhost
      register: deployInfo

    - name: Step 5 - Gathering facts of appliance
      setup:
      register: moreInfo
      delegate_to: '{{ deployInfo.instance.hw_eth0.ipaddresses[0] }}'
      when: release != 'jansa' or release != 'kasparov'

    - name: Step 6 - ManageIQ - Starting EVM service manually
      shell: systemctl start evmserverd.service
      delegate_to: '{{ deployInfo.instance.hw_eth0.ipaddresses[0] }}'
      when: release != 'jansa' or release != 'kasparov'

    - debug:
        msg: "You should now be able to access your appliance via https://{{ deployInfo.instance.hw_eth0.ipaddresses[0] }} Please allow roughly 15 minutes for the service to fully come online."

    - name: Step 7 - Build body for Cloudforms
      set_fact:
        payload:
          action: add_provider_vms
          resource:
            provider:
              href: "{{ manageiq.api_url }}/api/{{ provider_href_slug }}"
            uid_ems:
              - "{{ deployInfo.instance.hw_product_uuid }}"
      when: release != 'jansa' or release != 'kasparov'

    # - debug: msg="payload = {{ payload }}"

    - name: Step 8 - Register Vm with Cloudforms
      uri:
        url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}"
        method: POST
        body:  "{{ payload }}"
        body_format: json
        validate_certs: False
        user: "{{ cfme_userid }}"
        password: "{{ cfme_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      register: output
      when: release != 'jansa' or release != 'kasparov'

    # - debug: var=output.json.success

    # - name: Step 9 - Check if the VM was successfully attached to service
    #   fail: msg="{{ output.json.message }}"
    #   when: output.json.success == false




