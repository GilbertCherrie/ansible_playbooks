---
- hosts: localhost

  tasks:
    - name: Step 1 - Locating file
      find:
        paths: "/builds/cfme/{{ ystream }}/{{ version }}/"
        patterns: "cfme-vsphere-{{ version }}*.vsphere.ova"
      register: ova_image

    - name: Step 2 - Deploying OVA File
      vmware_deploy_ovf:
        hostname: '{{ myhost }}'
        username: '{{ redhatID }}'
        password: '{{ redhatPass }}'
        cluster: dev-vc67-cluster
        datacenter: dev-vc67-DC
        datastore: NFS Share
        ovf: "{{ item.path }}"
        allow_duplicates: no
        validate_certs: no
        name: '{{ newvm }}'
        power_on: no
      with_items: "{{ ova_image.files }}"
      delegate_to: localhost

    - name: Step 3 - Adding DB disk to appliance
      vmware_guest_disk:
        hostname: '{{ myhost }}'
        username: '{{ redhatID }}'
        password: '{{ redhatPass }}'
        datacenter: dev-vc67-DC
        name: '{{ newvm }}'
        validate_certs: no
        disk:
        - size_gb: 100
          state: present
          scsi_controller: 2
          unit_number: 1
          type: thin
          datastore: NFS Share

    - name: Step 4 - Adjusting memory size
      vmware_guest:
        hostname: '{{ myhost }}'
        username: '{{ redhatID }}'
        password: '{{ redhatPass }}'
        validate_certs: no
        name: '{{ newvm }}'
        hardware:
          memory_mb: "{{ memorySize }}"
      delegate_to: localhost

    - name: Step 5 - Powering on appliance
      vmware_guest:
        hostname: '{{ myhost }}'
        username: '{{ redhatID }}'
        password: '{{ redhatPass }}'
        validate_certs: no
        name: '{{ newvm }}'
        state: poweredon
        wait_for_ip_address: True
      delegate_to: localhost
      register: deployInfo

    - name: Step 6 - Gathering facts of appliance
      setup:
      register: moreInfo
      delegate_to: '{{ deployInfo.instance.hw_eth0.ipaddresses[0] }}'

    - name: Step 7 - Setting up DB on vdb
      shell: appliance_console_cli --internal --dbdisk /dev/vdb --region 0 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: moreInfo.ansible_facts.ansible_devices.vda.size != '100.00 GB' and ystream != '5.10'

    - name: Step 8 - Setting up DB on vda
      shell: appliance_console_cli --internal --dbdisk /dev/vda --region 0 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: moreInfo.ansible_facts.ansible_devices.vdb.size != '100.00 GB' and ystream != '5.10'

    - name: Step 9 - Setting up DB on vdb (for 5.10)
      shell: appliance_console_cli --internal --dbdisk /dev/vdb --region 10 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: moreInfo.ansible_facts.ansible_devices.vda.size != '100.00 GB' and ystream == '5.10'

    - name: Step 10 - Setting up DB on vda (for 5.10)
      shell: appliance_console_cli --internal --dbdisk /dev/vda --region 10 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: moreInfo.ansible_facts.ansible_devices.vdb.size != '100.00 GB' and ystream == '5.10'

    - name: Step 11 - Copy DB Import Script (for 5.9)
      copy:
        src: importdb46.sh
        dest: /tmp/importdb.sh
        mode: u+x
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB == 'true' and ystream == '5.9'

    - name: Step 12 - Copy DB Import Script (for 5.10)
      copy:
        src: importdb47.sh
        dest: /tmp/importdb.sh
        mode: u+x
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB == 'true' and ystream == '5.10'

    - name: Step 13 - Run DB Import Script
      shell: /tmp/importdb.sh
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB == 'true'

    - name: Step 14 - Starting EVM service manually
      shell: systemctl start evmserverd.service
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB != 'true'

    - debug:
        msg: "You should now be able to access your appliance via https://{{ deployInfo.instance.hw_eth0.ipaddresses[0] }} Please allow roughly 15 minutes for the service to fully come online."

    - name: Step 15 - Build body for Cloudforms
      set_fact:
        payload:
          action: add_provider_vms
          resource:
            provider:
              href: "{{ manageiq.api_url }}/api/{{ provider_href_slug }}"
            uid_ems:
              - "{{ deployInfo.instance.hw_product_uuid }}"
    - debug: msg="payload = {{ payload }}"

    - name: Step 16 - Register Vm with Cloudforms
      uri:
        url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}"
        method: POST
        body:  "{{ payload }}"
        body_format: json
        validate_certs: False
        user: "{{ cfme_userid }}"
        password: "{{ cfme_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      register: output

    - debug: var=output.json.success

    - name: Step 17 - Check if the VM was successfully attached to service
      fail: msg="{{ output.json.message }}"
      when: output.json.success == false